#░█▀█░█░█░▀█▀░█▀█░░░░░█▀▀░█▀▀░█▀█░█▀▀░█▀▄░█▀█░▀█▀░█▀▀░█▀▄
#░█▀█░█░█░░█░░█░█░▄▄▄░█░█░█▀▀░█░█░█▀▀░█▀▄░█▀█░░█░░█▀▀░█░█
#░▀░▀░▀▀▀░░▀░░▀▀▀░░░░░▀▀▀░▀▀▀░▀░▀░▀▀▀░▀░▀░▀░▀░░▀░░▀▀▀░▀▀░
# DO NOT UPDATE: This file is managed by "build-configs"

orbs:
  aws-cli: circleci/aws-cli@3.1.3

parameters:
  image_tag:
    default: "{{ product }}-{{ name }}"
    type: string
  registry:
    default: "{{ dockerfile.registry }}"
    type: string

commands:
  setup-base:
    steps:
      - aws-cli/install
{% if dependencies.private %}
      - run:
          name: Install Doppler CLI - latest
          command: |
            (curl -Ls https://cli.doppler.com/install.sh \
              || wget -qO- https://cli.doppler.com/install.sh) \
              | sh -s -- --no-install --no-package-manager

            mkdir -p /tmp/doppler
            mv ./doppler /tmp/doppler/doppler

            echo 'export PATH=/tmp/doppler:"$PATH"' >> "$BASH_ENV"
{% endif %}
      - run:
          name: Install Just CLI - latest
          command: |
            curl \
              --proto '=https' \
              --tlsv1.2 -sSf https://just.systems/install.sh \
              | bash -s -- --to /tmp/just

            echo 'export PATH=/tmp/just:"$PATH"' >> "$BASH_ENV"

      - checkout

      - setup_remote_docker:
          docker_layer_caching: true
          version: 20.10.17

      - run:
          name: Login to ECR
          command: just login

jobs:
  build:
    docker:
      - image: cimg/base:current
    resource_class: small

    steps:
      - setup-base

      - run:
          name: Build images
          command: just build "${CIRCLE_SHA1}"

      - run:
          name: Push images
          command: |
            just push "${CIRCLE_SHA1}-build"
            just push "${CIRCLE_SHA1}"
{% if service.tests is containing("lint") %}
  test-lint:
    docker:
      - image: << pipeline.parameters.registry >>/<< pipeline.parameters.image_tag >>:${CIRCLE_SHA1}-build
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY
    resource_class: small
    working_directory: /usr/src/app

    steps:
      - run:
          name: Run lint
          command: just lint
{%- endif -%}
{% if service.tests is containing("migrate") %}

  test-migrate:
    docker:
      - image: << pipeline.parameters.registry >>/<< pipeline.parameters.image_tag >>:${CIRCLE_SHA1}-build
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY
        environment:
          POSTGRESQL_DBNAME: "postgres"
          POSTGRESQL_HOST: "postgres"
          POSTGRESQL_PASSWORD: "secret"
          POSTGRESQL_USER: "postgres"
      - image: cimg/postgres:15.1
        name: "postgres"
        environment:
          POSTGRES_PASSWORD: "secret"
    resource_class: small
    working_directory: /usr/src/app

    steps:
      - run:
          name: Wait for database
          command: |
            dockerize -wait "tcp://${POSTGRESQL_HOST}:5432" -timeout 1m

      - run:
          name: Run migrate
          command: |
            ./docker-entrypoint.sh migrate
{%- endif -%}
{% if service.tests is containing("unit") %}

  test-unit:
    docker:
      - image: << pipeline.parameters.registry >>/<< pipeline.parameters.image_tag >>:${CIRCLE_SHA1}-build
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY
    resource_class: small
    working_directory: /usr/src/app

    steps:
      - run:
          name: Run units
          command: just test

      - store_artifacts:
          path: ./coverage

      - store_test_results:
          path: ./coverage
{% endif %}
  tag:
    docker:
      - image: cimg/base:current
    resource_class: small

    steps:
      - setup-base

      - run:
          name: Pull images
          command: |
            just pull ${CIRCLE_SHA1}

      - run:
          name: Push tags
          command: |
            export CURRENT_TAG="$(git describe --tags --abbrev=0)"
            export CURRENT_VERSION=$(cat package.json | jq -r ".version")

            if [ "$CURRENT_TAG" != "$CURRENT_VERSION" ]; then
                just tag ${CIRCLE_SHA1} ${CURRENT_VERSION}
                just push ${CURRENT_VERSION}
            else
              echo "Skipped push due to no changes in version."
            fi

workflows:
  build-test-tag:
    jobs:
      - build:
          context:
            - altf4llc-aws
{% for test in service.tests %}
      - test-{{ test }}:
          context:
            - altf4llc-aws
          requires:
            - build
{% endfor %}
      - tag:
          context:
            - altf4llc-aws
          filters:
            branches:
              only: main
          requires:
{%- if service.tests | length > 0 %}
{%- for test in service.tests %}
            - test-{{ test }}
{%- endfor %}
{%- else %}
            - build
{%- endif %}

version: 2.1
