#░█▀█░█░█░▀█▀░█▀█░░░░░█▀▀░█▀▀░█▀█░█▀▀░█▀▄░█▀█░▀█▀░█▀▀░█▀▄
#░█▀█░█░█░░█░░█░█░▄▄▄░█░█░█▀▀░█░█░█▀▀░█▀▄░█▀█░░█░░█▀▀░█░█
#░▀░▀░▀▀▀░░▀░░▀▀▀░░░░░▀▀▀░▀▀▀░▀░▀░▀▀▀░▀░▀░▀░▀░░▀░░▀▀▀░▀▀░
# DO NOT UPDATE: This file is managed by "build-configs"

orbs:
  aws-cli: circleci/aws-cli@3.1.3

parameters:
  image_tag:
    default: "{{ product }}-{{ name }}"
    type: string
  registry:
    default: "{{ dockerfile.registry }}"
    type: string

commands:
  login-ecr:
    steps:
      - run:
          name: Login to ECR
          command: just login

jobs:
  build:
    docker:
      - image: cimg/base:current
    resource_class: small

    steps:
      - aws-cli/install
{% if dependencies.private %}
      - run:
          name: Install Doppler CLI - latest
          command: |
            (curl -Ls https://cli.doppler.com/install.sh \
              || wget -qO- https://cli.doppler.com/install.sh) \
              | sh -s -- --no-install --no-package-manager

            mkdir -p /tmp/doppler
            mv ./doppler /tmp/doppler/doppler

            echo 'export PATH=/tmp/doppler:"$PATH"' >> "$BASH_ENV"
{% endif %}
      - run:
          name: Install Just CLI - latest
          command: |
            curl \
              --proto '=https' \
              --tlsv1.2 -sSf https://just.systems/install.sh \
              | bash -s -- --to /tmp/just

            echo 'export PATH=/tmp/just:"$PATH"' >> "$BASH_ENV"

      - setup_remote_docker:
          docker_layer_caching: true
          version: 20.10.17

      - checkout

      - login-ecr

      - run:
          name: Build images
          command: just build "${CIRCLE_SHA1}"

      - run:
          name: Push images
          command: just push "${CIRCLE_SHA1}"
{% if pulumi.resource_class is matching("altf4llc/machine-") %}
      - persist_to_workspace:
          root: .
          paths:
            - justfile
{%- endif %}

  pulumi:
{%- if pulumi.resource_class is matching("altf4llc/machine-") %}
    machine: true
{%- else %}
    docker:
      - image: << pipeline.parameters.registry >>/<< pipeline.parameters.image_tag >>:${CIRCLE_SHA1}
        aws_auth:
          aws_access_key_id: $AWS_ACCESS_KEY_ID
          aws_secret_access_key: $AWS_SECRET_ACCESS_KEY
{%- endif %}
    parameters:
      command:
        type: string
      stack:
        type: string
    resource_class: {{ pulumi.resource_class | safe }}
{%- if pulumi.resource_class is not matching("altf4llc/machine-") %}
    working_directory: /usr/src/app
{%- endif %}

    steps:
{%- if pulumi.resource_class is matching("altf4llc/machine-") %}
      - attach_workspace:
          at: .

      - login-ecr

      - run:
          name: Pull image
          command: |
            just pull ${CIRCLE_SHA1}
{% if pulumi.eks_cluster != "" %}
      - run:
          name: Update kubeconfig
          command: |
            docker container run \
              --env DOPPLER_TOKEN \
              --interactive \
              --rm \
              --tty \
              --volume "$(pwd)/.kube:/root/.kube" \
              << pipeline.parameters.registry >>/<< pipeline.parameters.image_tag >>:${CIRCLE_SHA1} \
              just update-kubeconfig
{% endif %}
      - run:
          name: Run << parameters.command >> << parameters.stack >>
          command: |
            docker container run \
              --env DOPPLER_TOKEN \
              --interactive \
              --rm \
              --tty \
              {%- if pulumi.eks_cluster != "" %}
              --volume "$(pwd)/.kube:/root/.kube" \
              {%- endif %}
              << pipeline.parameters.registry >>/<< pipeline.parameters.image_tag >>:${CIRCLE_SHA1} \
              just << parameters.command >> << parameters.stack >>
{%- if pulumi.eks_cluster != "" %}
      - run:
          name: Clean environment
          command: |
            sudo rm -rf .kube/
          when: always
{%- endif %}
{%- else %}
      - run:
          name: Run << parameters.command >> << parameters.stack >>
          command: |
            just << parameters.command >> << parameters.stack >>
{%- endif %}

workflows:
  build-preview-update:
    jobs:
      - build:
          context:
            - altf4llc-aws
{% for environment in environments %}
      - pulumi:
          name: refresh-{{ environment }}
          command: refresh
          stack: {{ environment }}
          context:
            - altf4llc-aws
          requires:
            - build
{% endfor -%}
{% for environment in environments %}
      - pulumi:
          name: preview-{{ environment }}
          command: preview
          stack: {{ environment }}
          context:
            - altf4llc-aws
          requires:
            - refresh-{{ environment }}
{% endfor -%}
{% for environment in environments %}
      - pulumi:
          name: update-{{ environment }}
          command: update
          stack: {{ environment }}
          context:
            - altf4llc-aws
          filters:
            branches:
              only:
                - main
          requires:
            - preview-{{ environment }}
{% endfor %}
version: 2.1
